from math import floor, ceil

is_int = isinstance$(?, int)

def find_last_where(predicate, lst):
  c = len(lst) - 1
  while not predicate(lst[c]) and c >= 0:
    c -= 1
  return lst[c] if c >= 0 else None

def try_explode_snailfish_number(snf):
  s = [(snf, [])]
  while s:
    node, path = s.pop()

    if node.is_leaf():
      if len(path) >= 4:
        # explode
        direct_parent, direction = path[-1]
        
        if direction == 'r':
          direct_parent.right = 0
        else:
          direct_parent.left = 0

        left, right = node.left, node.right
        # add left to left node
        if (c := path |> find_last_where$(x -> x[1] == 'r')) is not None:
          pt = c[0]
          if pt.left |> is_int:
            pt.left += left
          else:
            pt = pt.left
            while not pt.right |> is_int:
              pt = pt.right
            pt.right += left

        # add right to right node
        if (c := path |> find_last_where$(x -> x[1] == 'l')) is not None:
          pt = c[0]
          if pt.right |> is_int:
            pt.right += right
          else:
            pt = pt.right
            while not pt.left |> is_int:
              pt = pt.left
            pt.left += right

        return True
    else:
      if isinstance(node.right, SnailFish):
        s.append((node.right, path+[(node, 'r')]))
      if isinstance(node.left, SnailFish):
        s.append((node.left, path+[(node, 'l')]))
  return False

def try_split_child(node, direction):
  match direction:
    case 'l':
      if node.left |> is_int:
        if node.left >= 10:
          node.left = SnailFish.split_regular(node.left)
          return True
      return False
    case 'r':
      if node.right |> is_int:
        if node.right >= 10:
          node.right = SnailFish.split_regular(node.right)
          return True
      return False

def try_split_snailfish_number(snf):
  s = [(snf, 'l')]
  while s:
    node, direction = s.pop()

    to_push = []

    if direction == 'l':
      if node.is_leaf():
        if try_split_child(node, 'l'):
            return True
        if try_split_child(node, 'r'):
            return True
      else:
        if node.left |> is_int:
          if try_split_child(node, 'l'):
            return True
        else:
          to_push.append((node.left, 'l'))
        to_push.append((node, 'r'))
    else:
      if node.right |> is_int:
        if try_split_child(node, 'r'):
          return True
      else:
        to_push.append((node.right, 'l'))
    s += (to_push |> reversed..>list)

  return False

def reduce_snailfish_number(snf):
  # explode
  if try_explode_snailfish_number(snf):
    # print('explode', snf)
    return reduce_snailfish_number(snf)

  # split
  if try_split_snailfish_number(snf):
    # print('split->', snf)
    return reduce_snailfish_number(snf)

  return snf

def node_equivalent(a, b):
  match (a, b):
    case (a is int, b is int):
      return a == b
    case (a is SnailFish, b is SnailFish):
      return a == b
    case _:
      return False

class SnailFish:
  @staticmethod
  def parse(raw):
    brackets_level = 0
    stack = []

    acc = ''

    for c in raw:
      match c:
        case '[':
          brackets_level += 1
        case ']':
          if len(acc) > 0:
            stack.append(int(acc))
            acc = ''
          right, left = stack.pop(), stack.pop()
          stack.append(SnailFish(left, right))
          brackets_level -= 1
        case ',':
          if len(acc) > 0:
            stack.append(int(acc))
            acc = ''
        case a:
          acc += a
  
    assert brackets_level == 0, 'unclosed brackets detected'
    return stack[0]

  @staticmethod
  def split_regular(regular):
    return SnailFish(floor(regular / 2), ceil(regular / 2))

  def __init__(self, left, right):
    self.left = left
    self.right = right

  def __repr__(self):
    return f'[{repr(self.left)},{repr(self.right)}]'

  def __add__(self, other):
    return SnailFish(self.copy(), other.copy()).reduce()

  def __eq__(self, other):
    match (self.is_leaf(), other.is_leaf()):
      case (True, True):
        return self.left == other.left and self.right == other.right
      case (False, False):
        return node_equivalent(self.left, other.left) and node_equivalent(self.right, other.right)
      case _:
        return False

  def copy(self):
    left_copy = if self.left |> is_int then self.left else self.left.copy()
    right_copy = if self.right |> is_int then self.right else self.right.copy()

    return SnailFish(left_copy, right_copy)

  def is_leaf(self):
    return self.left |> is_int and self.right |> is_int

  def reduce(self):
    return reduce_snailfish_number(self)

  def magnitude(self):
    left_mag = (
      if self.left |> is_int then self.left
      else self.left.magnitude()
    )

    right_mag = (
      if self.right |> is_int then self.right
      else self.right.magnitude()
    )

    return 3*left_mag + 2*right_mag

SNF = SnailFish.parse

# region tests
# equality
assert SnailFish(1, 0) == SNF('[1,0]')

# explodes
assert SNF('[[[[[9,8],1],2],3],4]').reduce() == SNF('[[[[0,9],2],3],4]')
assert SNF('[7,[6,[5,[4,[3,2]]]]]').reduce() == SNF('[7,[6,[5,[7,0]]]]')
assert SNF('[[6,[5,[4,[3,2]]]],1]').reduce() == SNF('[[6,[5,[7,0]]],3]')
assert SNF('[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]').reduce() == SNF('[[3,[2,[8,0]]],[9,[5,[7,0]]]]')

# single splits
assert SnailFish.split_regular(10) == SnailFish(5, 5)
assert SnailFish.split_regular(11) == SnailFish(5, 6)

# additions
snf_sum = SNF('[[[[4,3],4],4],[7,[[8,4],9]]]') + SNF('[1,1]')
assert snf_sum == SNF('[[[[0,7],4],[[7,8],[6,0]]],[8,1]]')

# large sums
def parse_and_sum(snfs_string) = snfs_string.strip().split() |> map$(SNF)..>list |> reduce$(+)

assert """
[1,1]
[2,2]
[3,3]
[4,4]
""" |> parse_and_sum == SNF('[[[[1,1],[2,2]],[3,3]],[4,4]]')

assert """
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
""" |> parse_and_sum == SNF('[[[[3,0],[5,3]],[4,4]],[5,5]]')

assert """
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]
""" |> parse_and_sum == SNF('[[[[5,0],[7,4]],[5,5]],[6,6]]')

assert """
[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]
""" |> parse_and_sum == SNF('[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]')

# magnitudes
assert SNF('[9,1]').magnitude() == 29
assert SNF('[1,9]').magnitude() == 21
assert SNF('[[9,1],[1,9]]').magnitude() == 129
assert SNF('[[1,2],[[3,4],5]]').magnitude() == 143
assert SNF('[[[[0,7],4],[[7,8],[6,0]]],[8,1]]').magnitude() == 1384
assert SNF('[[[[1,1],[2,2]],[3,3]],[4,4]]').magnitude() == 445
assert SNF('[[[[3,0],[5,3]],[4,4]],[5,5]]').magnitude() == 791
assert SNF('[[[[5,0],[7,4]],[5,5]],[6,6]]').magnitude() == 1137
assert SNF('[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]').magnitude() == 3488

# test case for part 1
part1_testcase = """
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
""" |> parse_and_sum
assert part1_testcase == SNF('[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]')
assert part1_testcase.magnitude() == 4140
# endregion

with open('./inputs/day18.txt') as infile:
  snfs = infile.readlines() |> map$(.strip()..>SNF)..>list

# part 1
part1_ans = snfs |> reduce$(+) |> .magnitude()
print(f'part 1 = {part1_ans}')

# part 2
part2_ans = -1

for i, snf1 in enumerate(snfs):
  for j, snf2 in enumerate(snfs):
    if i != j:
      part2_ans = max(part2_ans, (snf1+snf2).magnitude())

print(f'part 2 = {part2_ans}')