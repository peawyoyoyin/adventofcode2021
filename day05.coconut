def parse_line(line):
  tokens = line.strip().split(' -> ')
  pairs = tokens |> map$(.split(',')) |> list
  return pairs |> map$(p -> map(int, p) |> tuple) |> tuple

def straight_line(pair):
  line_start, line_end = pair
  start_x, start_y = line_start
  end_x, end_y = line_end

  return start_x == end_x or start_y == end_y

def is_vertical(pair):
  line_start, line_end = pair
  start_x, start_y = line_start
  end_x, end_y = line_end

  return start_x == end_x

def is_horizontal(pair):
  line_start, line_end = pair
  start_x, start_y = line_start
  end_x, end_y = line_end

  return start_y == end_y

with open('./inputs/day5.txt') as infile:
  lines = infile.readlines() |> map$(parse_line) |> list

straight_lines = lines |> filter$(straight_line) |> list

grid = [[0] * 1000 for _ in range(1000)] # grid[y][x]
for line in straight_lines:
  start, end = line
  sx, sy = start
  ex, ey = end
  if is_vertical(line):
    if sy > ey:
      sy, ey = ey, sy
    
    for i in range(sy, ey + 1):
      grid[i][sx] += 1
  else: # is horizontal
    if sx > ex:
      sx, ex = ex, sx
    for i in range(sx, ex + 1):
      grid[sy][i] += 1

intersections = 0
for row in grid:
  for col in row:
    if col > 1:
      intersections += 1
print(f'part 1 = {intersections}')
# end part 1

grid = [[0] * 1000 for _ in range(1000)]
for line in lines:
  start, end = line
  sx, sy = start
  ex, ey = end

  if is_vertical(line):
    if sy > ey:
      sy, ey = ey, sy
    
    for i in range(sy, ey + 1):
      grid[i][sx] += 1
  elif is_horizontal(line):
    if sx > ex:
      sx, ex = ex, sx
    for i in range(sx, ex + 1):
      grid[sy][i] += 1
  else:
    x, y = sx, sy

    dirX = (ex - sx) // abs(ex - sx)
    dirY = (ey - sy) // abs(ey - sy)

    while x != ex:
      grid[y][x] += 1
      x += dirX
      y += dirY
    # last point
    grid[y][x] += 1

intersections = 0
for row in grid:
  for col in row:
    if col > 1:
      intersections += 1
print(f'part 2 = {intersections}')
